# 7. Реализовать генератор с помощью функции с ключевым словом yield,
# создающим очередное значение. При вызове функции должен создаваться объект-генератор.
# Функция вызывается следующим образом: for el in fact(n). Она отвечает за получение факториала числа.
# В цикле нужно выводить только первые n чисел, начиная с 1! и до n!.
#
# Подсказка: факториал числа n — произведение чисел от 1 до n.
# Например, факториал четырёх 4! = 1 * 2 * 3 * 4 = 24.


def fact(arg_1):    # Генератор, выдающий последовательность от 1 до arg_1
    fact_count = 1
    while fact_count <= arg_1:
        res = fact_count
        yield res
        fact_count += 1


def factor(arg_1):  # Функция, вычисляющая факториал своего аргумента с использованием генератора...
    num_res = 1
    res = str(arg_1) + "! = "
    for el in fact(arg_1):  # ... по заданному в условии шаблону...
        res += (str(el) + " * ")
        num_res *= el
    res = res[:-2] + "= " + str(num_res) + "."
    return res      # ... и возвращающая строку с решением.


# Обозначим переменную:
my_ans = "y"

while my_ans == "y":        # Цикл для повтора программы
    n = ""
    while type(n) == str:   # Цикл для ввода целого числа
        n = input("Input the number: ")
        try:                # Пробуем преобразовать в целое число
            n = int(n)
        except ValueError:  # Если ввели не целое число, выводим сообщение и повторяем ввод
            print(f'"n" must be integer!')

    print(factor(n))        # Выводим строку с результатом вычислений
    my_ans = ""             # Далее следует запрос на продолжение
    while (my_ans != "y") and (my_ans != "n"):
        my_ans = input("Would you like to continue? (y/n): y")
        if my_ans == "":
            my_ans = "y"
